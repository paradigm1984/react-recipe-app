{"ast":null,"code":"var _jsxFileName = \"/Users/blancooo/Web-Development/React/recipie-app/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\n\nconst App = () => {\n  // you can write actuakl JS anywhere between opening up the component and the return function\n  const APP_ID = \"4ca90bc3\";\n  const APP_KEY = \"efcca35385635d8635bd078f5b89099f\"; // by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\n\n  useEffect(() => {}, []); // async functions are a way to use promises. similar to .then().\n\n  const getRecipies = async () => {\n    // gives you an await option that will make JS wait until the data is recieved and then assigns it to a var.\n    const response = await fetch(`https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = response.json();\n    console.log(\"data: \", data);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Recipe Search\"), React.createElement(\"form\", {\n    className: \"search-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"search-bar\",\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => setCounter(counter + 1),\n    className: \"search-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, counter)));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/blancooo/Web-Development/React/recipie-app/src/App.js"],"names":["React","useEffect","useState","App","APP_ID","APP_KEY","getRecipies","response","fetch","data","json","console","log","setCounter","counter"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAG,GAAG,MAAK;AACjB;AAEA,QAAMC,MAAM,GAAG,UAAf;AACA,QAAMC,OAAO,GAAG,kCAAhB,CAJiB,CAOjB;;AACAJ,EAAAA,SAAS,CAAC,MAAK,CACd,CADQ,EACN,EADM,CAAT,CARiB,CAWjB;;AACA,QAAMK,WAAW,GAAG,YAAY;AAC9B;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,kDAAiDJ,MAAO,YAAWC,OAAQ,EAA7E,CAA5B;AACA,UAAMI,IAAI,GAAGF,QAAQ,CAACG,IAAT,EAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,IAAtB;AACD,GALD;;AAOE,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAC,YAAjB;AAA8B,IAAA,IAAI,EAAC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,OAAO,EAAE,MAAKI,UAAU,CAACC,OAAO,GAAG,CAAX,CAAhC;AAA+C,IAAA,SAAS,EAAC,eAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0EA,OAA1E,CAFF,CAFF,CADF;AASD,CA5BD;;AA8BA,eAAeX,GAAf","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport './App.css';\n\nconst App = ()=> {\n// you can write actuakl JS anywhere between opening up the component and the return function\n\nconst APP_ID = \"4ca90bc3\";\nconst APP_KEY = \"efcca35385635d8635bd078f5b89099f\";\n\n\n// by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\nuseEffect(()=> {\n}, []);\n\n// async functions are a way to use promises. similar to .then().\nconst getRecipies = async () => {\n  // gives you an await option that will make JS wait until the data is recieved and then assigns it to a var.\n  const response = await fetch(`https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}`);\n  const data = response.json();\n  console.log(\"data: \", data);\n}\n\n  return (\n    <div className=\"App\">\n      <h2>Recipe Search</h2>\n      <form className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\"/>\n        <button onClick={()=> setCounter(counter + 1)} className=\"search-button\">{counter}</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}