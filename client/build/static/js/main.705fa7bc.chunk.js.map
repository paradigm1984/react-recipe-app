{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipie","title","image","calories","ingredients","useState","isOpen","setIsOpen","Card","className","Img","variant","src","alt","Body","Title","Text","Button","onClick","style","marginBottom","Collapse","ListGroup","map","ingredient","ListGroupItem","text","App","recipies","setRecipies","searchString","setSearchString","queryString","setQueryString","React","width","window","innerWidth","height","innerHeight","appDimensions","setAppDimensions","useEffect","getRecipies","addEventListener","updateWidthAndHeight","removeEventListener","minWidth","minHeight","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","InputGroup","FormControl","placeholder","aria-label","aria-describedby","type","value","onChange","target","Append","recipe","key","uri","label","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.705fa7bc.chunk.js","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport Styles from './Recipe.module.scss';\nimport {Card, Button, ListGroup, ListGroupItem, Collapse} from 'react-bootstrap';\n\n\n\n// https://reactstrap.github.io/components/collapse/\n\nconst Recipie = ({title, calories, image, ingredients}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n\n  return(\n    <Card className=\"recipe-card\">\n      <Card.Img variant=\"top\" src={image} alt={title} />\n      <Card.Body>\n        <Card.Title>{title}</Card.Title>\n        <Card.Text>\n          Some quick example text to build on the card title and make up the bulk of\n          the card's content.\n        </Card.Text>\n        <div className=\"button-container\">\n          <Button className=\"recipe-button\" onClick={toggle} style={{ marginBottom: '1rem' }}>View Recipe</Button>\n        </div>\n      </Card.Body>\n      <Collapse isOpen={isOpen}>\n        <ListGroup className=\"list-group-flush\">\n          {ingredients.map(ingredient => (\n            <ListGroupItem>{ingredient.text}</ListGroupItem>\n          ))}\n        </ListGroup>\n      </Collapse>\n      \n    </Card>\n  );\n}\n\nexport default Recipie;\n","import React,{useEffect, useState} from 'react';\nimport Recipie from './Recipe';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\nimport {InputGroup, FormControl, Button} from 'react-bootstrap';\n\nconst App = ()=> {\n\n  const APP_ID = \"4ca90bc3\";\n  const APP_KEY = \"efcca35385635d8635bd078f5b89099f\";\n\n  const [recipies, setRecipies] = useState([]);  \n  const [searchString, setSearchString] = useState(\"\");\n  const [queryString, setQueryString] = useState(\"\");\n  const [appDimensions, setAppDimensions] = React.useState({width: window.innerWidth, height: window.innerHeight});\n\n  // by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\n  useEffect(()=> {\n    getRecipies();\n  }, [queryString]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWidthAndHeight);\n    return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\n  });\n\n  const updateWidthAndHeight = () => {\n    setAppDimensions({minWidth: window.innerWidth, minHeight: window.innerHeight})\n  };\n\n  // async functions are a way to use promises. similar to .then().\n  const getRecipies = async () => {\n    // gives you an await option that will make JS wait until the data is recieved and then assigns it to a var. especially useful when getting a response from an API.\n    const response = await fetch(`https://api.edamam.com/search?q=${queryString}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    // console.log(\"data: \", data.hits);\n    setRecipies(data.hits);\n    console.log(data.hits);\n  }\n\n  // seems to be an ES6 way of writing a function for events\n  const updateSearch = e => {\n    setSearchString(e.target.value)\n    // console.log(\"search string:\", searchString)\n  }\n\n  const submitSearch = e => {\n    e.preventDefault();\n    setQueryString(searchString);\n    setSearchString(\"\");\n    updateWidthAndHeight();\n  }\n\n  return (\n    <div className=\"app\" style={appDimensions}>\n      <section className=\"submit-section\">\n        <h2 className=\"app-header\" >Recipe Search</h2>\n        <form  onSubmit={submitSearch}>\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            placeholder=\"Search a recipe\"\n            aria-label=\"Recipe\"\n            aria-describedby=\"basic-addon2\"\n            className=\"search-bar\"\n            type=\"text\"\n            value={searchString}\n            onChange={updateSearch}\n          />\n      <InputGroup.Append>\n        <Button variant=\"outline-secondary\" className=\"search-button\">Submit</Button>\n      </InputGroup.Append>\n    </InputGroup>\n        </form>\n   \n      </section>\n      <section className=\"response-section\">\n        {/* mapping the array of objects which is being pulled in by the API.\n        uses the Recipie component to lay it all out in HTML (JSX) */}\n          {recipies.map(recipe =>(\n            <Recipie\n              key={recipe.recipe.uri}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n            />\n          ))}\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}