{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipie","title","calories","image","ingredients","cautions","filter","cautionsList","map","caution","className","console","log","Col","lg","sm","Accordion","defaultActiveKey","Card","Img","variant","src","alt","Header","ListGroup","style","display","length","Toggle","as","Button","eventKey","icon","faCaretDown","color","Collapse","Body","ingredient","ListGroupItem","text","App","APP_KEY","useState","recipies","setRecipies","searchString","setSearchString","queryString","setQueryString","React","width","window","innerWidth","height","innerHeight","appDimensions","setAppDimensions","useEffect","generateFilterOptions","addEventListener","updateWidthAndHeight","removeEventListener","minWidth","minHeight","getRecipies","a","undefined","fetch","response","json","data","hits","Axios","get","res","error","Form","id","onSubmit","e","preventDefault","InputGroup","Control","placeholder","aria-label","aria-describedby","type","value","onChange","target","Append","Tabs","Tab","Row","recipe","key","uri","label","toFixed","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3de898ab.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/Recipe.scss';\nimport { Card, Button, ListGroup, ListGroupItem, Accordion, Col } from 'react-bootstrap';\n// Fontawesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\n\nconst Recipie = ({ title, calories, image, ingredients, cautions, filter }) => {\n  // filters cautions list and doesnt show that div if there are no cautions\n  const cautionsList = cautions.map(caution => (\n    <li className=\"caution-list-item\">{ caution }</li>\n  ));\n  console.log(\"filter: \", filter);\n\n  return (\n    <Col lg={5} sm={10}>\n      <Accordion defaultActiveKey=\"0\">\n        <Card className=\"recipe-card\">\n          <div className=\"card-img-container container\">\n            <Card.Img variant=\"top\" src={ image } alt={ title } />\n          </div>\n          <Card.Header>\n            <h2>{ title }</h2>\n          </Card.Header>\n          <div className=\"basic-info-container\">\n            <p className=\"calories\">calories: { calories }</p>\n            <ListGroup style={{ display: (cautionsList.length > 0 ? 'inherit' : 'none') }}>\n              <p className=\"cautions\">Cautions:</p>\n              <li style={{ display: (cautionsList.length > 0 ? 'inherit' : 'none') }} className=\"cautions-list\">\n                { cautionsList }\n              </li>\n            </ListGroup>\n            <p className=\"filter\">Filter: { filter }</p>\n          </div>\n          <div className=\"recipie-list-container\">\n            <Accordion.Toggle className=\"expand-button\" as={ Button } variant=\"link\" eventKey=\"1\">\n              <span>View Ingredients</span>\n              <FontAwesomeIcon icon={ faCaretDown } color=\"black\" />\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"1\">\n              <Card.Body>\n                <ListGroup className=\"list-group-flush\">\n                  {\n                    ingredients.map(ingredient => (<ListGroupItem>{ingredient.text}</ListGroupItem>))\n                  }\n                </ListGroup>\n              </Card.Body>\n            </Accordion.Collapse>\n          </div>\n          <div className=\"\">\n            <Accordion.Toggle className=\"expand-button\" as={ Button } variant=\"link\" eventKey=\"1\">\n              <span>View Recipe</span>\n              <FontAwesomeIcon icon={ faCaretDown } color=\"black\" />\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"1\">\n              <Card.Body>\n                <ListGroup className=\"list-group-flush\">\n                  {\n                    // ingredients.map(ingredient => (<ListGroupItem>{ingredient.text}</ListGroupItem>))\n                  }\n                </ListGroup>\n              </Card.Body>\n            </Accordion.Collapse>\n          </div>\n        </Card>\n      </Accordion>\n    </Col> \n  );\n}\n\nexport default Recipie;\n","import React,{useEffect, useState} from 'react';\nimport Recipie from './Recipe';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/App.scss';\nimport Axios from 'axios';\nimport { InputGroup, Form, Button, Row, Accordion, Tabs, Tab } from 'react-bootstrap';\n// Fontawesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\n\n\n// TODO: add filters.js to this file and have access to that array of objects so that you\n// can create a dropdown under the search with more detailed search fields. you might have to\n// export them from the filters.js file\n\n// also TODO: finish styling the data in the cards and see what else you want to bring in \n// from the API data\n\n\nconst App = () => {\n  \n  const APP_ID = \"4ca90bc3\";\n  const APP_KEY = \"efcca35385635d8635bd078f5b89099f\";\n  const [recipies, setRecipies] = useState([]);  \n  const [searchString, setSearchString] = useState(\"\");\n  const [queryString, setQueryString] = useState(\"\");\n  const [appDimensions, setAppDimensions] = React.useState({width: window.innerWidth, height: window.innerHeight});\n\n  // by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\n  // useEffect(()=> {\n  //   getRecipies();\n  // }, [queryString]);\n\n  useEffect(() => {\n    generateFilterOptions();\n  },[]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWidthAndHeight);\n    return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\n  });\n\n  const updateWidthAndHeight = () => {\n    setAppDimensions({minWidth: window.innerWidth, minHeight: window.innerHeight})\n  };\n\n  // async functions are a way to use promises. similar to .then().\n  const getRecipies = async (filter) => {\n    // gives you an await option that will make JS wait until the data is recieved and then assigns it to a var. especially useful when getting a response from an API.\n    let response;\n    let data;\n\n    if (!filter || filter === \"\" || filter === null || filter === undefined) {\n      response = await fetch(`https://api.edamam.com/search?q=${queryString}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n      console.log(\"response no filter: \", response);\n      data = await response.json();\n    } else {\n      response = await fetch(`https://api.edamam.com/search?q=${queryString}&app_id=${APP_ID}&app_key=${APP_KEY}&health=${filter}`);\n      console.log(\"response with filter: \", response);\n      data = await response.json();\n    }\n    console.log(\"data: \", data.hits);\n    setRecipies(data.hits);\n  }\n\n  const updateSearch = e => {\n    setSearchString(e.target.value);\n  }\n\n  const generateFilterOptions = async () => {\n    console.log(\"starting generateFilterOptions\");\n\n    try {\n      const res = await Axios.get('/filters');\n      console.log(res.data);\n    } catch (err) {\n      // Handle Error Here\n      console.error(err);\n    }\n\n\n    // try {\n    //   const response = await Axios.get('/filters');\n    //   console.log(\"filter response: \", response);\n\n    // } catch (err) {\n    //   console.log(\"error making request: \", err)\n\n    // }\n    // // let filterOptions = await response.json();\n    // // console.log(\"filter options: \", filterOptions);\n  }\n\n  const submitSearch = e => {\n    e.preventDefault();\n    // console.log(`submitting search with ${queryString} as the query string`);\n    setQueryString(searchString);\n    getRecipies(queryString);\n    setSearchString(\"\");\n    updateWidthAndHeight();\n  }\n\n  return (\n    <div className=\"app\" style={appDimensions}>\n      <section className=\"submit-section\">\n        <h2 className=\"app-header-1\" >Recipe Search</h2>\n        <Form id=\"recipeSubmit\" onSubmit={submitSearch}>\n          <InputGroup className=\"mb-3\">\n            <Form.Control\n              placeholder=\"Search a recipe\"\n              aria-label=\"Recipe\"\n              aria-describedby=\"basic-addon2\"\n              className=\"search-bar\"\n              type=\"text\"\n              value={searchString}\n              onChange={updateSearch}\n            />\n            <InputGroup.Append>    \n              <Button variant=\"outline-secondary\" type=\"submit\" className=\"search-button\">Submit</Button>\n            </InputGroup.Append>\n          </InputGroup>\n          <Accordion className=\"hidden-filters-container\" defaultActiveKey=\"0\">\n            <Accordion.Toggle className=\"filter-button\" as={Button} variant=\"link\" eventKey=\"1\">\n              <span>View Filter Options</span>\n              <FontAwesomeIcon icon={faCaretDown} color=\"#495057\" />\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"1\">\n              <div id=\"filters\">\n                <Tabs defaultActiveKey=\"diet\" id=\"uncontrolled-tab-example\">\n                  <Tab eventKey=\"diet\" title=\"Diet\">\n                    <div className=\"filters-choice-row\">\n                      <span>test</span>\n                      <span>test</span>\n                      <span>test</span>\n                      <span>test</span>\n                      {\n                        // Filters.map(filter => (<span>{filter.label}</span>))\n                      }\n                    </div>\n                  </Tab>\n                  <Tab eventKey=\"health\" title=\"Health\">\n                    <div className=\"filters-choice-row\">\n                      <span>test</span>\n                      <span>test</span>\n                      <span>test</span>\n                      <span>test</span>\n                    </div>\n                  </Tab>\n                </Tabs>\n              </div>\n            </Accordion.Collapse>\n          </Accordion>\n        </Form>\n      </section>\n      <section className=\"response-section\">\n        <Row className=\"recipie-row\">\n          {/* mapping the array of objects which is being pulled in by the API.\n        uses the Recipie component to lay it all out in HTML (JSX) */}\n          {recipies.map(recipe => (\n            <Recipie\n              key={recipe.recipe.uri}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories.toFixed(0)}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n              cautions={recipe.recipe.cautions}\n              // filter={filter}\n            />\n          ))}\n        </Row>\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}