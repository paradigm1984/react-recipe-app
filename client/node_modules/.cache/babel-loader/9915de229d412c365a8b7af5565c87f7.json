{"ast":null,"code":"var _jsxFileName = \"/Users/blancooo/Web-Development/React/recipe-app-mern/client/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Recipie from './Recipe';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/App.scss';\nimport { InputGroup, FormControl, Button, Row } from 'react-bootstrap';\n\nconst App = () => {\n  const APP_ID = \"4ca90bc3\";\n  const APP_KEY = \"efcca35385635d8635bd078f5b89099f\";\n  const [recipies, setRecipies] = useState([]);\n  const [searchString, setSearchString] = useState(\"\");\n  const [queryString, setQueryString] = useState(\"\");\n  const [appDimensions, setAppDimensions] = React.useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [showing, setShowing] = useState(true);\n\n  if (cautions.length == 0) {\n    setShowing(false);\n  } // by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\n\n\n  useEffect(() => {\n    getRecipies();\n  }, [queryString]);\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWidthAndHeight);\n    return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\n  });\n\n  const updateWidthAndHeight = () => {\n    setAppDimensions({\n      minWidth: window.innerWidth,\n      minHeight: window.innerHeight\n    });\n  }; // async functions are a way to use promises. similar to .then().\n\n\n  const getRecipies = async () => {\n    // gives you an await option that will make JS wait until the data is recieved and then assigns it to a var. especially useful when getting a response from an API.\n    const response = await fetch(`https://api.edamam.com/search?q=${queryString}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json(); // console.log(\"data: \", data.hits);\n\n    setRecipies(data.hits);\n    console.log(data.hits);\n  }; // seems to be an ES6 way of writing a function for events\n\n\n  const updateSearch = e => {\n    setSearchString(e.target.value); // console.log(\"search string:\", searchString)\n  };\n\n  const submitSearch = e => {\n    e.preventDefault();\n    setQueryString(searchString);\n    setSearchString(\"\");\n    updateWidthAndHeight();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    style: appDimensions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"submit-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"app-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Recipe Search\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    placeholder: \"Search a recipe\",\n    \"aria-label\": \"Recipe\",\n    \"aria-describedby\": \"basic-addon2\",\n    className: \"search-bar\",\n    type: \"text\",\n    value: searchString,\n    onChange: updateSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-secondary\",\n    className: \"search-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Submit\"))))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"response-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"recipie-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, recipies.map(recipe => /*#__PURE__*/React.createElement(Recipie, {\n    key: recipe.recipe.uri,\n    title: recipe.recipe.label,\n    calories: recipe.recipe.calories.toFixed(0),\n    image: recipe.recipe.image,\n    ingredients: recipe.recipe.ingredients,\n    cautions: recipe.recipe.cautions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/blancooo/Web-Development/React/recipe-app-mern/client/src/App.js"],"names":["React","useEffect","useState","Recipie","InputGroup","FormControl","Button","Row","App","APP_ID","APP_KEY","recipies","setRecipies","searchString","setSearchString","queryString","setQueryString","appDimensions","setAppDimensions","width","window","innerWidth","height","innerHeight","showing","setShowing","cautions","length","getRecipies","addEventListener","updateWidthAndHeight","removeEventListener","minWidth","minHeight","response","fetch","data","json","hits","console","log","updateSearch","e","target","value","submitSearch","preventDefault","map","recipe","uri","label","calories","toFixed","image","ingredients"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport Recipie from './Recipe';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/App.scss';\nimport { InputGroup, FormControl, Button, Row } from 'react-bootstrap';\n\nconst App = ()=> {\n\n  const APP_ID = \"4ca90bc3\";\n  const APP_KEY = \"efcca35385635d8635bd078f5b89099f\";\n  const [recipies, setRecipies] = useState([]);  \n  const [searchString, setSearchString] = useState(\"\");\n  const [queryString, setQueryString] = useState(\"\");\n  const [appDimensions, setAppDimensions] = React.useState({width: window.innerWidth, height: window.innerHeight});\n  const [showing, setShowing] = useState(true);\n  if (cautions.length == 0) {\n    setShowing(false);\n  }\n  // by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\n  useEffect(()=> {\n    getRecipies();\n  }, [queryString]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWidthAndHeight);\n    return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\n  });\n\n  const updateWidthAndHeight = () => {\n    setAppDimensions({minWidth: window.innerWidth, minHeight: window.innerHeight})\n  };\n\n  // async functions are a way to use promises. similar to .then().\n  const getRecipies = async () => {\n    // gives you an await option that will make JS wait until the data is recieved and then assigns it to a var. especially useful when getting a response from an API.\n    const response = await fetch(`https://api.edamam.com/search?q=${queryString}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    // console.log(\"data: \", data.hits);\n    setRecipies(data.hits);\n    console.log(data.hits);\n  }\n\n  // seems to be an ES6 way of writing a function for events\n  const updateSearch = e => {\n    setSearchString(e.target.value)\n    // console.log(\"search string:\", searchString)\n  }\n\n  const submitSearch = e => {\n    e.preventDefault();\n    setQueryString(searchString);\n    setSearchString(\"\");\n    updateWidthAndHeight();\n  }\n\n  return (\n    <div className=\"app\" style={appDimensions}>\n      <section className=\"submit-section\">\n        <h2 className=\"app-header\" >Recipe Search</h2>\n        <form  onSubmit={submitSearch}>\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            placeholder=\"Search a recipe\"\n            aria-label=\"Recipe\"\n            aria-describedby=\"basic-addon2\"\n            className=\"search-bar\"\n            type=\"text\"\n            value={searchString}\n            onChange={updateSearch}\n          />\n      <InputGroup.Append>\n        <Button variant=\"outline-secondary\" className=\"search-button\">Submit</Button>\n      </InputGroup.Append>\n    </InputGroup>\n        </form>\n   \n      </section>\n      <section className=\"response-section\">\n        <Row className=\"recipie-row\">\n          {/* mapping the array of objects which is being pulled in by the API.\n        uses the Recipie component to lay it all out in HTML (JSX) */}\n          {recipies.map(recipe => (\n            <Recipie\n              key={recipe.recipe.uri}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories.toFixed(0)}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n              cautions={recipe.recipe.cautions}\n            />\n          ))}\n        </Row>\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}