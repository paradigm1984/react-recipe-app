{"ast":null,"code":"import _slicedToArray from \"/Users/blancooo/Web-Development/React/react-recipe-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/blancooo/Web-Development/React/react-recipe-app/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Recipie from './Recipe';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\n\nconst App = () => {\n  // you can write actuakl JS anywhere between opening up the component and the return function\n  const APP_ID = \"4ca90bc3\";\n  const APP_KEY = \"efcca35385635d8635bd078f5b89099f\";\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        recipies = _useState2[0],\n        setRecipies = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        searchString = _useState4[0],\n        setSearchString = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        queryString = _useState6[0],\n        setQueryString = _useState6[1];\n\n  const _React$useState = React.useState(window.innerWidth),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        width = _React$useState2[0],\n        setWidth = _React$useState2[1];\n\n  const _React$useState3 = React.useState(window.innerHeight),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        height = _React$useState4[0],\n        setHeight = _React$useState4[1]; // by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\n\n\n  useEffect(() => {\n    getRecipies();\n  }, [queryString]);\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWidthAndHeight);\n    return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\n  });\n\n  const updateWidthAndHeight = () => {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n  }; // async functions are a way to use promises. similar to .then().\n\n\n  const getRecipies = async () => {\n    // gives you an await option that will make JS wait until the data is recieved and then assigns it to a var. especially useful when getting a response from an API.\n    const response = await fetch(`https://api.edamam.com/search?q=${queryString}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json(); // console.log(\"data: \", data.hits);\n\n    setRecipies(data.hits);\n    console.log(data.hits);\n  }; // seems to be an ES6 way of writing a function for events\n\n\n  const updateSearch = e => {\n    setSearchString(e.target.value); // console.log(\"search string:\", searchString)\n  };\n\n  const submitSearch = e => {\n    e.preventDefault();\n    setQueryString(searchString);\n    setSearchString(\"\");\n  };\n\n  return React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"submit-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"app-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Recipe Search\"), React.createElement(\"form\", {\n    onSubmit: submitSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(InputGroup, {\n    className: \"mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    placeholder: \"Search a recipe\",\n    \"aria-label\": \"Recipe\",\n    \"aria-describedby\": \"basic-addon2\",\n    className: \"search-bar\",\n    type: \"text\",\n    value: searchString,\n    onChange: updateSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(InputGroup.Append, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outline-secondary\",\n    className: \"search-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Submit\"))))), React.createElement(\"section\", {\n    className: \"response-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, recipies.map(recipe => React.createElement(Recipie, {\n    key: recipe.recipe.uri,\n    title: recipe.recipe.label,\n    calories: recipe.recipe.calories,\n    image: recipe.recipe.image,\n    ingredients: recipe.recipe.ingredients,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/blancooo/Web-Development/React/react-recipe-app/src/App.js"],"names":["React","useEffect","useState","Recipie","InputGroup","FormControl","Button","App","APP_ID","APP_KEY","recipies","setRecipies","searchString","setSearchString","queryString","setQueryString","window","innerWidth","width","setWidth","innerHeight","height","setHeight","getRecipies","addEventListener","updateWidthAndHeight","removeEventListener","response","fetch","data","json","hits","console","log","updateSearch","e","target","value","submitSearch","preventDefault","map","recipe","uri","label","calories","image","ingredients"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport Recipie from './Recipe';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\nimport {InputGroup, FormControl, Button} from 'react-bootstrap';\n\nconst App = ()=> {\n  // you can write actuakl JS anywhere between opening up the component and the return function\n\n  const APP_ID = \"4ca90bc3\";\n  const APP_KEY = \"efcca35385635d8635bd078f5b89099f\";\n\n  const [recipies, setRecipies] = useState([]);\n  const [searchString, setSearchString] = useState(\"\");\n  const [queryString, setQueryString] = useState(\"\");\n  const [width, setWidth] = React.useState(window.innerWidth);\n  const [height, setHeight] = React.useState(window.innerHeight);\n\n  // by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\n  useEffect(()=> {\n    getRecipies();\n  }, [queryString]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWidthAndHeight);\n    return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\n});\n\n  const updateWidthAndHeight = () => {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n  };\n\n  // async functions are a way to use promises. similar to .then().\n  const getRecipies = async () => {\n    // gives you an await option that will make JS wait until the data is recieved and then assigns it to a var. especially useful when getting a response from an API.\n    const response = await fetch(`https://api.edamam.com/search?q=${queryString}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    // console.log(\"data: \", data.hits);\n    setRecipies(data.hits);\n    console.log(data.hits);\n  }\n\n  // seems to be an ES6 way of writing a function for events\n  const updateSearch = e => {\n    setSearchString(e.target.value)\n    // console.log(\"search string:\", searchString)\n  }\n\n  const submitSearch = e => {\n    e.preventDefault();\n    setQueryString(searchString);\n    setSearchString(\"\");\n  }\n\n  return (\n    <div className=\"app\">\n      <section className=\"submit-section\">\n        <h2 className=\"app-header\" >Recipe Search</h2>\n        <form  onSubmit={submitSearch}>\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            placeholder=\"Search a recipe\"\n            aria-label=\"Recipe\"\n            aria-describedby=\"basic-addon2\"\n            className=\"search-bar\"\n            type=\"text\"\n            value={searchString}\n            onChange={updateSearch}\n          />\n      <InputGroup.Append>\n        <Button variant=\"outline-secondary\" className=\"search-button\">Submit</Button>\n      </InputGroup.Append>\n    </InputGroup>\n        </form>\n   \n      </section>\n      <section className=\"response-section\">\n        {/* mapping the array of objects which is being pulled in by the API.\n        uses the Recipie component to lay it all out in HTML (JSX) */}\n        {recipies.map(recipe =>(\n          <Recipie\n            key={recipe.recipe.uri}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}