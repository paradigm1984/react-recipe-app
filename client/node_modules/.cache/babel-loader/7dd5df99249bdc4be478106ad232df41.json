{"ast":null,"code":"import _slicedToArray from \"/Users/blancooo/Web-Development/React/recipie-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/blancooo/Web-Development/React/recipie-app/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport recipie from './Recipie';\nimport './App.css';\n\nconst App = () => {\n  // you can write actuakl JS anywhere between opening up the component and the return function\n  const APP_ID = \"4ca90bc3\";\n  const APP_KEY = \"efcca35385635d8635bd078f5b89099f\";\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        recipies = _useState2[0],\n        setRecipies = _useState2[1]; // by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\n\n\n  useEffect(() => {\n    getRecipies();\n  }, []); // async functions are a way to use promises. similar to .then().\n\n  const getRecipies = async () => {\n    // gives you an await option that will make JS wait until the data is recieved and then assigns it to a var. especially useful when getting a response from an API.\n    const response = await fetch(`https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json(); // console.log(\"data: \", data.hits);\n\n    setRecipies(data.hits);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Recipe Search\"), React.createElement(\"form\", {\n    className: \"search-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"search-bar\",\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"search-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Search\")), recipies.map(recipe => React.createElement(\"recipie\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/blancooo/Web-Development/React/recipie-app/src/App.js"],"names":["React","useEffect","useState","recipie","App","APP_ID","APP_KEY","recipies","setRecipies","getRecipies","response","fetch","data","json","hits","map","recipe"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAG,GAAG,MAAK;AACjB;AAEA,QAAMC,MAAM,GAAG,UAAf;AACA,QAAMC,OAAO,GAAG,kCAAhB;;AAJiB,oBAMeJ,QAAQ,CAAC,EAAD,CANvB;AAAA;AAAA,QAMVK,QANU;AAAA,QAMAC,WANA,kBAQjB;;;AACAP,EAAAA,SAAS,CAAC,MAAK;AACbQ,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT,CATiB,CAajB;;AACA,QAAMA,WAAW,GAAG,YAAY;AAC9B;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,kDAAiDN,MAAO,YAAWC,OAAQ,EAA7E,CAA5B;AACA,UAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAH8B,CAI9B;;AACAL,IAAAA,WAAW,CAACI,IAAI,CAACE,IAAN,CAAX;AACD,GAND;;AAQE,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAC,YAAjB;AAA8B,IAAA,IAAI,EAAC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,SAAS,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAFF,EAMGP,QAAQ,CAACQ,GAAT,CAAaC,MAAM,IAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CANH,CADF;AAYD,CAlCD;;AAoCA,eAAeZ,GAAf","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport recipie from './Recipie';\nimport './App.css';\n\nconst App = ()=> {\n// you can write actuakl JS anywhere between opening up the component and the return function\n\nconst APP_ID = \"4ca90bc3\";\nconst APP_KEY = \"efcca35385635d8635bd078f5b89099f\";\n\nconst [recipies, setRecipies] = useState([]);\n\n// by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\nuseEffect(()=> {\n  getRecipies();\n}, []);\n\n// async functions are a way to use promises. similar to .then().\nconst getRecipies = async () => {\n  // gives you an await option that will make JS wait until the data is recieved and then assigns it to a var. especially useful when getting a response from an API.\n  const response = await fetch(`https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}`);\n  const data = await response.json();\n  // console.log(\"data: \", data.hits);\n  setRecipies(data.hits);\n}\n\n  return (\n    <div className=\"App\">\n      <h2>Recipe Search</h2>\n      <form className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\"/>\n        <button className=\"search-button\">Search</button>\n      </form>\n      {recipies.map(recipe =>(\n        <recipie/>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}