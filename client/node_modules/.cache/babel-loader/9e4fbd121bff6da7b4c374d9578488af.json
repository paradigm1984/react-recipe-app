{"ast":null,"code":"import _regeneratorRuntime from\"/Users/blancooo/Web-Development/React/recipe-app-mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/blancooo/Web-Development/React/recipe-app-mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/blancooo/Web-Development/React/recipe-app-mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import Recipie from'./Recipe';import'bootstrap/dist/css/bootstrap.min.css';import'./App.scss';import{InputGroup,FormControl,Button}from'react-bootstrap';var App=function App(){var APP_ID=\"4ca90bc3\";var APP_KEY=\"efcca35385635d8635bd078f5b89099f\";var _useState=useState([]),_useState2=_slicedToArray(_useState,2),recipies=_useState2[0],setRecipies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),searchString=_useState4[0],setSearchString=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),queryString=_useState6[0],setQueryString=_useState6[1];var _React$useState=React.useState({width:window.innerWidth,height:window.innerHeight}),_React$useState2=_slicedToArray(_React$useState,2),appDimensions=_React$useState2[0],setAppDimensions=_React$useState2[1];// by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\nuseEffect(function(){getRecipies();},[queryString]);useEffect(function(){window.addEventListener(\"resize\",updateWidthAndHeight);return function(){return window.removeEventListener(\"resize\",updateWidthAndHeight);};});var updateWidthAndHeight=function updateWidthAndHeight(){setAppDimensions({minWidth:window.innerWidth,minHeight:window.innerHeight});};// async functions are a way to use promises. similar to .then().\nvar getRecipies=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://api.edamam.com/search?q=\".concat(queryString,\"&app_id=\").concat(APP_ID,\"&app_key=\").concat(APP_KEY));case 2:response=_context.sent;_context.next=5;return response.json();case 5:data=_context.sent;// console.log(\"data: \", data.hits);\nsetRecipies(data.hits);console.log(data.hits);case 8:case\"end\":return _context.stop();}}},_callee);}));return function getRecipies(){return _ref.apply(this,arguments);};}();// seems to be an ES6 way of writing a function for events\nvar updateSearch=function updateSearch(e){setSearchString(e.target.value);// console.log(\"search string:\", searchString)\n};var submitSearch=function submitSearch(e){e.preventDefault();setQueryString(searchString);setSearchString(\"\");updateWidthAndHeight();};return/*#__PURE__*/React.createElement(\"div\",{className:\"app\",style:appDimensions},/*#__PURE__*/React.createElement(\"section\",{className:\"submit-section\"},/*#__PURE__*/React.createElement(\"h2\",{className:\"app-header\"},\"Recipe Search\"),/*#__PURE__*/React.createElement(\"form\",{onSubmit:submitSearch},/*#__PURE__*/React.createElement(InputGroup,{className:\"mb-3\"},/*#__PURE__*/React.createElement(FormControl,{placeholder:\"Search a recipe\",\"aria-label\":\"Recipe\",\"aria-describedby\":\"basic-addon2\",className:\"search-bar\",type:\"text\",value:searchString,onChange:updateSearch}),/*#__PURE__*/React.createElement(InputGroup.Append,null,/*#__PURE__*/React.createElement(Button,{variant:\"outline-secondary\",className:\"search-button\"},\"Submit\"))))),/*#__PURE__*/React.createElement(\"section\",{className:\"response-section\"},recipies.map(function(recipe){return/*#__PURE__*/React.createElement(Recipie,{key:recipe.recipe.uri,title:recipe.recipe.label,calories:recipe.recipe.calories,image:recipe.recipe.image,ingredients:recipe.recipe.ingredients});})));};export default App;","map":{"version":3,"sources":["/Users/blancooo/Web-Development/React/recipe-app-mern/client/src/App.js"],"names":["React","useEffect","useState","Recipie","InputGroup","FormControl","Button","App","APP_ID","APP_KEY","recipies","setRecipies","searchString","setSearchString","queryString","setQueryString","width","window","innerWidth","height","innerHeight","appDimensions","setAppDimensions","getRecipies","addEventListener","updateWidthAndHeight","removeEventListener","minWidth","minHeight","fetch","response","json","data","hits","console","log","updateSearch","e","target","value","submitSearch","preventDefault","map","recipe","uri","label","calories","image","ingredients"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport Recipie from './Recipe';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\nimport {InputGroup, FormControl, Button} from 'react-bootstrap';\n\nconst App = ()=> {\n\n  const APP_ID = \"4ca90bc3\";\n  const APP_KEY = \"efcca35385635d8635bd078f5b89099f\";\n\n  const [recipies, setRecipies] = useState([]);  \n  const [searchString, setSearchString] = useState(\"\");\n  const [queryString, setQueryString] = useState(\"\");\n  const [appDimensions, setAppDimensions] = React.useState({width: window.innerWidth, height: window.innerHeight});\n\n  // by adding an empty array to the useEffect function as a param, itll only run when the app has mounted. you could add the state in which you want this function to run within the array.\n  useEffect(()=> {\n    getRecipies();\n  }, [queryString]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWidthAndHeight);\n    return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\n  });\n\n  const updateWidthAndHeight = () => {\n    setAppDimensions({minWidth: window.innerWidth, minHeight: window.innerHeight})\n  };\n\n  // async functions are a way to use promises. similar to .then().\n  const getRecipies = async () => {\n    // gives you an await option that will make JS wait until the data is recieved and then assigns it to a var. especially useful when getting a response from an API.\n    const response = await fetch(`https://api.edamam.com/search?q=${queryString}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    // console.log(\"data: \", data.hits);\n    setRecipies(data.hits);\n    console.log(data.hits);\n  }\n\n  // seems to be an ES6 way of writing a function for events\n  const updateSearch = e => {\n    setSearchString(e.target.value)\n    // console.log(\"search string:\", searchString)\n  }\n\n  const submitSearch = e => {\n    e.preventDefault();\n    setQueryString(searchString);\n    setSearchString(\"\");\n    updateWidthAndHeight();\n  }\n\n  return (\n    <div className=\"app\" style={appDimensions}>\n      <section className=\"submit-section\">\n        <h2 className=\"app-header\" >Recipe Search</h2>\n        <form  onSubmit={submitSearch}>\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            placeholder=\"Search a recipe\"\n            aria-label=\"Recipe\"\n            aria-describedby=\"basic-addon2\"\n            className=\"search-bar\"\n            type=\"text\"\n            value={searchString}\n            onChange={updateSearch}\n          />\n      <InputGroup.Append>\n        <Button variant=\"outline-secondary\" className=\"search-button\">Submit</Button>\n      </InputGroup.Append>\n    </InputGroup>\n        </form>\n   \n      </section>\n      <section className=\"response-section\">\n        {/* mapping the array of objects which is being pulled in by the API.\n        uses the Recipie component to lay it all out in HTML (JSX) */}\n          {recipies.map(recipe =>(\n            <Recipie\n              key={recipe.recipe.uri}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n            />\n          ))}\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}